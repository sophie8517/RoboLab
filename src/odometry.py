# !/usr/bin/env python3
import math


class Odometry:
    def __init__(self):
        """
        Initializes odometry module
        """

        # YOUR CODE FOLLOWS (remove pass, please!)
        pass

    def do(self):
        dx = 0
        dy = 0
        gamma = 0
        ticks = [(0, 0), (19, 14), (28, 20), (38, 30), (46, 39), (56, 46), (62, 52), (71, 60), (82, 69), (91, 76),
                 (98, 84), (110, 94), (120, 103), (129, 110), (136, 118), (143, 124), (149, 129), (154, 132),
                 (158, 136),
                 (162, 140), (167, 144), (172, 148), (175, 151), (180, 156), (185, 160), (190, 164), (195, 168),
                 (198, 171), (203, 175), (207, 178), (212, 183), (219, 188), (225, 194), (232, 199), (239, 204),
                 (246, 211), (252, 215), (258, 220), (263, 224), (268, 228), (274, 233), (281, 238), (286, 243),
                 (290, 246), (295, 251), (299, 253), (305, 258), (310, 262), (314, 266), (318, 269), (323, 273),
                 (328, 277), (335, 282), (341, 286), (344, 289), (349, 292), (353, 296), (359, 300), (364, 304),
                 (369, 307), (374, 311), (378, 315), (383, 318), (388, 322), (393, 327), (400, 332), (404, 335),
                 (409, 338), (414, 342), (418, 346), (423, 350), (430, 356), (436, 360), (442, 365), (447, 368),
                 (452, 373), (457, 377), (461, 380), (466, 384), (472, 389), (477, 393), (481, 396), (486, 400),
                 (490, 403), (494, 406), (497, 409), (500, 412), (508, 418), (514, 422), (519, 426), (522, 429),
                 (527, 433), (531, 436), (535, 440), (540, 444), (545, 448), (558, 458), (567, 466), (573, 471),
                 (578, 475), (582, 478), (587, 482), (591, 485), (595, 488), (602, 494), (610, 499), (615, 503),
                 (620, 507), (624, 510), (627, 512), (632, 516), (639, 521), (643, 524), (649, 529), (654, 532),
                 (660, 537), (666, 542), (673, 546), (680, 551), (687, 557), (694, 562), (701, 568), (709, 574),
                 (719, 580), (728, 588), (739, 595), (747, 602), (754, 606), (762, 610), (768, 614), (775, 618),
                 (780, 620), (784, 623), (789, 626), (796, 630), (802, 634), (809, 637), (815, 641), (820, 644),
                 (826, 647), (831, 650), (838, 655), (844, 659), (849, 662), (854, 665), (860, 670), (866, 674),
                 (871, 676), (877, 681), (882, 684), (886, 687), (890, 689), (895, 693), (899, 696), (905, 700),
                 (909, 704), (914, 707), (919, 710), (924, 714), (930, 718), (934, 722), (940, 726), (945, 728),
                 (950, 732), (955, 734), (961, 738), (967, 742), (972, 746), (976, 749), (981, 752), (986, 756),
                 (990, 760), (996, 764), (1003, 769), (1008, 773), (1012, 776), (1018, 780), (1021, 783), (1027, 787),
                 (1033, 791), (1038, 796), (1043, 799), (1048, 803), (1053, 807), (1058, 810), (1064, 816), (1070, 820),
                 (1077, 825), (1083, 830), (1088, 834), (1094, 839), (1101, 844), (1106, 848), (1109, 851), (1114, 855),
                 (1118, 858), (1124, 863), (1131, 868), (1139, 874), (1145, 880), (1151, 885), (1156, 890), (1163, 894),
                 (1168, 899), (1175, 904), (1180, 908), (1184, 912), (1190, 916), (1194, 919), (1198, 922), (1205, 927),
                 (1210, 930), (1214, 934), (1218, 937), (1224, 942), (1230, 946), (1235, 950), (1242, 955), (1246, 958),
                 (1252, 963), (1256, 966), (1262, 970), (1267, 974), (1271, 977), (1276, 980), (1280, 984), (1284, 987),
                 (1289, 991), (1294, 995), (1299, 998), (1305, 1003), (1310, 1006), (1315, 1011), (1321, 1014),
                 (1326, 1018), (1332, 1021), (1337, 1024), (1340, 1027), (1345, 1030), (1351, 1035), (1358, 1039),
                 (1363, 1042), (1368, 1044), (1372, 1047), (1377, 1051), (1382, 1054), (1386, 1057), (1391, 1061),
                 (1398, 1065), (1404, 1068), (1410, 1072), (1414, 1075), (1418, 1078), (1425, 1082), (1431, 1086),
                 (1437, 1090), (1443, 1093), (1447, 1096), (1451, 1099), (1456, 1102), (1462, 1106), (1467, 1110),
                 (1473, 1114), (1478, 1117), (1483, 1120), (1487, 1123), (1492, 1127), (1497, 1130), (1502, 1134),
                 (1507, 1138), (1513, 1142), (1517, 1144), (1523, 1148), (1530, 1153), (1537, 1158), (1541, 1161),
                 (1546, 1164), (1551, 1168), (1556, 1171), (1561, 1175), (1566, 1178), (1569, 1180), (1574, 1184),
                 (1579, 1188), (1584, 1191), (1589, 1194), (1595, 1198), (1603, 1204), (1610, 1208), (1617, 1213),
                 (1624, 1218), (1631, 1222), (1637, 1226), (1645, 1232), (1653, 1238), (1657, 1240), (1664, 1245),
                 (1670, 1249), (1674, 1252), (1680, 1257), (1686, 1260), (1691, 1263), (1697, 1266), (1704, 1272),
                 (1709, 1275), (1712, 1278), (1717, 1283), (1721, 1286), (1725, 1290), (1730, 1294), (1735, 1298),
                 (1740, 1302), (1745, 1306), (1750, 1309), (1754, 1313), (1759, 1316), (1763, 1320), (1768, 1324),
                 (1774, 1330), (1779, 1334), (1783, 1337), (1787, 1341), (1791, 1345), (1795, 1348), (1799, 1351),
                 (1804, 1356), (1809, 1360), (1814, 1364), (1820, 1369), (1825, 1374), (1829, 1378), (1834, 1382),
                 (1838, 1386), (1845, 1392), (1851, 1398), (1857, 1402), (1862, 1406), (1867, 1410), (1871, 1413),
                 (1876, 1418), (1880, 1421), (1885, 1425), (1889, 1429), (1894, 1432), (1900, 1438), (1907, 1444),
                 (1913, 1449), (1919, 1454), (1924, 1458), (1928, 1462), (1934, 1467), (1940, 1473), (1946, 1478),
                 (1950, 1482), (1955, 1486), (1963, 1493), (1967, 1497), (1972, 1501), (1976, 1505), (1983, 1511)]
        distance_per_tick = 14.5 / 300
        wheel_distance = 16.5

        ticks_delta = []
        last_element = ticks.pop(0)
        for i in ticks:
            ticks_delta.append((i[0] - last_element[0], i[1] - last_element[1]))
            last_element = i

        length_delta = []
        for i in ticks_delta:
            dr = i[0] * distance_per_tick
            dl = i[1] * distance_per_tick
            alpha = (dr - dl) / wheel_distance
            beta = alpha / 2
            if alpha != 0:
                s = ((dr - dl) / alpha) * math.sin(beta)
            else:
                s = dr
            dx += -math.sin(gamma + beta) * s
            dy += math.cos(gamma + beta) * s
            gamma += alpha
            length_delta.append((s, alpha))

        print(length_delta)
        print("New Orientation in degree: ", math.degrees(gamma))
        print("dx: ", dx)
        print("dy: ", dy)

        # distance = ticks * distance_per_tick


if __name__ == '__main__':
    o = Odometry()
    o.do()
